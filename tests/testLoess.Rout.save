
R version 2.15.3 Patched (2013-03-13 r62287) -- "Security Blanket"
Copyright (C) 2013 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> ### $Id: testLoess.R 945 2015-01-21 00:06:51Z proebuck $
> ###
> 
> 
> if (!nzchar(Sys.getenv("SUPERCURVE_FULL_TEST"))) {
+     cat(">>>>                <<<<", "\n")
+     cat(">>>>  Test skipped  <<<<", "\n")
+     cat(">>>>                <<<<", "\n")
+     message(sprintf("To run all package tests, define %s environment variable",
+                     dQuote("SUPERCURVE_FULL_TEST")))
+     q("no")
+ }
> options(warn=1)
> library(SuperCurve)
Loading required package: cobs
> library(robustbase)
> 
> extdata.dir <- system.file("extdata", package="SuperCurveSampleData")
> 
> ######################################
> ## load the tumor data
> home <- file.path(extdata.dir, "rppaTripleData")
> 
> ## first locate the list of assays
> ## the name 'proteins' is required
> ## must include two columns named 'Antibody' and 'Filename'.
> proteins <- read.delim(file.path(home, "proteinAssay.tsv"), as.is=TRUE)
> rownames(proteins) <- as.character(proteins$Antibody)
> 
> for (i in seq_len(nrow(proteins))) {
+     temp <- RPPA(proteins$Filename[i],
+                  path=home,
+                  antibody=proteins$Antibody[i])
+     assign(proteins$Antibody[i], temp, 1)
+ }
> remove(i, temp)
> 
> ######################################
> ## work out the appropriate design layout
> design <- RPPADesign(ACTB)
> 
> ######################################
> ## must define the 'model' to use
> model <- "loess"
> 
> ######################################
> ## must define the 'measure' to use
> measure <- "Mean.Net"
> 
> ######################################
> ## loess is very slow; we are only going to test
> ## a single protein.
> proteins <- proteins[nrow(proteins), ]
> 
> ######################################
> ## must define the 'method' to use
> method <- 'nlrq'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ver <- packageDescription("SuperCurve", fields = "Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.5.8 

> cat(paste("model = ", model, "; method = ", method, 
+     "; measure = ", measure, sep = ""), "\n")
model = loess; method = nlrq; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item, design, measure, method = method, 
+         model = model, ignoreNegative = FALSE, warnLevel = -1), 
+         TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm = TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm = TRUE, trim = 0.1)
+     par(bg = "white")
+     plot(temp, xlim = c(-15, 15), main = paste(itemName, measure, 
+         ver), sub = paste("Mean square residuals =", round(meansq)))
+     if (FALSE) {
+         dev.copy(png, file.path(paste(itemName, measure, ver, 
+             "png", sep = ".")), width = 640, height = 640)
+         dev.off()
+     }
+     print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
Loading required package: quantreg
Loading required package: SparseM

Attaching package: 'SparseM'

The following object(s) are masked from 'package:base':

    backsolve

[1] "ACTB-gray Mean.Net 469690 205795"

> remove(i, itemName, item, meansq, tmeansq)
> 
> method <- 'nlrob'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ver <- packageDescription("SuperCurve", fields = "Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.5.8 

> cat(paste("model = ", model, "; method = ", method, 
+     "; measure = ", measure, sep = ""), "\n")
model = loess; method = nlrob; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item, design, measure, method = method, 
+         model = model, ignoreNegative = FALSE, warnLevel = -1), 
+         TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm = TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm = TRUE, trim = 0.1)
+     par(bg = "white")
+     plot(temp, xlim = c(-15, 15), main = paste(itemName, measure, 
+         ver), sub = paste("Mean square residuals =", round(meansq)))
+     if (FALSE) {
+         dev.copy(png, file.path(paste(itemName, measure, ver, 
+             "png", sep = ".")), width = 640, height = 640)
+         dev.off()
+     }
+     print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
[1] "ACTB-gray Mean.Net 438465 212956"

> remove(i, itemName, item, meansq, tmeansq)
> 
> method <- "nls"
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ver <- packageDescription("SuperCurve", fields = "Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.5.8 

> cat(paste("model = ", model, "; method = ", method, 
+     "; measure = ", measure, sep = ""), "\n")
model = loess; method = nls; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item, design, measure, method = method, 
+         model = model, ignoreNegative = FALSE, warnLevel = -1), 
+         TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm = TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm = TRUE, trim = 0.1)
+     par(bg = "white")
+     plot(temp, xlim = c(-15, 15), main = paste(itemName, measure, 
+         ver), sub = paste("Mean square residuals =", round(meansq)))
+     if (FALSE) {
+         dev.copy(png, file.path(paste(itemName, measure, ver, 
+             "png", sep = ".")), width = 640, height = 640)
+         dev.off()
+     }
+     print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
[1] "ACTB-gray Mean.Net 421580 234844"

> remove(i, itemName, item, meansq, tmeansq)
> 
> ######################################
> ## print the concentrations from the last fit. These will
> ## automatically be compared with the saved output when we
> ## run 'R CMD check'
> round(temp@concentrations, digits=4)
 Series.1.1.1  Series.1.1.2  Series.1.1.3  Series.1.1.4  Series.1.1.5 
      -0.8602       -0.5906       -0.7306        1.9298        1.9597 
 Series.1.1.6  Series.1.2.1  Series.1.2.2  Series.1.2.3  Series.1.2.4 
       2.2992       -0.0766       -0.0985        0.2027        2.8092 
 Series.1.2.5  Series.1.2.6  Series.1.3.1  Series.1.3.2  Series.1.3.3 
       3.2177        3.2285        1.9441        2.2368        1.9823 
 Series.1.3.4  Series.1.3.5  Series.1.3.6  Series.1.4.1  Series.1.4.2 
       2.9777        2.5031        2.9114        3.3828        3.6138 
 Series.1.4.3  Series.1.4.4  Series.1.4.5  Series.1.4.6  Series.1.5.1 
       3.5499        3.5921        3.6464        4.0593        3.1576 
 Series.1.5.2  Series.1.5.3  Series.1.5.4  Series.1.5.5  Series.1.5.6 
       3.2333        2.9223        2.9495        3.1347        3.2423 
 Series.1.6.1  Series.1.6.2  Series.1.6.3  Series.1.6.4  Series.1.6.5 
       3.6149        3.9160        3.6874        3.3865        3.5561 
 Series.1.6.6  Series.1.7.1  Series.1.7.2  Series.1.7.3  Series.1.7.4 
       3.8625        3.8820        4.0591        3.8911        7.2820 
 Series.1.7.5  Series.1.7.6  Series.1.8.1  Series.1.8.2  Series.1.8.3 
       6.6822        6.8652        4.7676        5.1979        4.7265 
 Series.1.8.4  Series.1.8.5  Series.1.8.6  Series.1.9.1  Series.1.9.2 
       3.7238        3.8765        4.1746        4.5535        4.5426 
 Series.1.9.3  Series.1.9.4  Series.1.9.5  Series.1.9.6 Series.1.10.1 
       4.5674        6.8556        7.3246        7.5989        4.1443 
Series.1.10.2 Series.1.10.3 Series.1.10.4 Series.1.10.5 Series.1.10.6 
       4.6125        4.4950        4.3480        3.9703        4.5727 
Series.1.11.1 Series.1.11.2 Series.1.11.3 Series.1.11.4 Series.1.11.5 
       2.9584        3.1721        2.9397        3.0561        2.7478 
Series.1.11.6 Series.1.12.1 Series.1.12.2 Series.1.12.3 Series.1.12.4 
       3.1182        1.7063        1.7571        1.7199        0.9924 
Series.1.12.5 Series.1.12.6  Series.2.1.1  Series.2.1.2  Series.2.1.3 
       0.5025        1.1475        1.9074        1.6779        2.0198 
 Series.2.1.4  Series.2.1.5  Series.2.1.6  Series.2.2.1  Series.2.2.2 
      -1.0751       -0.2828       -1.1889        2.1312        1.9446 
 Series.2.2.3  Series.2.2.4  Series.2.2.5  Series.2.2.6  Series.2.3.1 
       1.8413        1.8101        1.5698        1.7560        2.9397 
 Series.2.3.2  Series.2.3.3  Series.2.3.4  Series.2.3.5  Series.2.3.6 
       2.7681        2.7168        1.3844        1.4297        1.2760 
 Series.2.4.1  Series.2.4.2  Series.2.4.3  Series.2.4.4  Series.2.4.5 
       4.7562        4.5977        4.3986        4.7928        4.9474 
 Series.2.4.6  Series.2.5.1  Series.2.5.2  Series.2.5.3  Series.2.5.4 
       5.1598        4.7345        4.7211        4.4231        4.6817 
 Series.2.5.5  Series.2.5.6  Series.2.6.1  Series.2.6.2  Series.2.6.3 
       4.5105        4.4279        6.1930        5.6408        5.3673 
 Series.2.6.4  Series.2.6.5  Series.2.6.6  Series.2.7.1  Series.2.7.2 
       5.1603        5.0483        4.8821        6.4825        6.4761 
 Series.2.7.3  Series.2.7.4  Series.2.7.5  Series.2.7.6  Series.2.8.1 
       6.5935        4.2292        3.9509        3.7344        6.4995 
 Series.2.8.2  Series.2.8.3  Series.2.8.4  Series.2.8.5  Series.2.8.6 
       6.3415        6.0467        4.2122        4.0063        3.9265 
 Series.2.9.1  Series.2.9.2  Series.2.9.3  Series.2.9.4  Series.2.9.5 
       5.8043        5.2290        5.0294        3.9849        3.9305 
 Series.2.9.6 Series.2.10.1 Series.2.10.2 Series.2.10.3 Series.2.10.4 
       3.9001       -0.2383       -0.3098       -0.5901       -0.0632 
Series.2.10.5 Series.2.10.6 Series.2.11.1 Series.2.11.2 Series.2.11.3 
      -0.3272       -0.4103       -0.2294       -0.4625       -0.4174 
Series.2.11.4 Series.2.11.5 Series.2.11.6 Series.2.12.1 Series.2.12.2 
      -0.8695       -1.1522       -1.3751       -0.7454       -1.2136 
Series.2.12.3 Series.2.12.4 Series.2.12.5 Series.2.12.6  Series.3.1.1 
      -1.0312       -3.2044       -3.1881       -2.7890        0.0310 
 Series.3.1.2  Series.3.1.3  Series.3.1.4  Series.3.1.5  Series.3.1.6 
       0.5650        0.6239        2.5525        2.3076        2.1425 
 Series.3.2.1  Series.3.2.2  Series.3.2.3  Series.3.2.4  Series.3.2.5 
       3.4380        3.3023        3.1705        4.0556        4.0233 
 Series.3.2.6  Series.3.3.1  Series.3.3.2  Series.3.3.3  Series.3.3.4 
       4.0407        3.5934        3.5800        3.2331        5.4542 
 Series.3.3.5  Series.3.3.6  Series.3.4.1  Series.3.4.2  Series.3.4.3 
       5.1599        5.4712        5.5806        5.1363        4.9577 
 Series.3.4.4  Series.3.4.5  Series.3.4.6  Series.3.5.1  Series.3.5.2 
       5.0053        4.6410        4.8304        4.5422        4.5434 
 Series.3.5.3  Series.3.5.4  Series.3.5.5  Series.3.5.6  Series.3.6.1 
       4.3845        4.1813        4.3831        4.4786        5.5073 
 Series.3.6.2  Series.3.6.3  Series.3.6.4  Series.3.6.5  Series.3.6.6 
       5.6549        5.3021        4.5688        5.0839        5.0391 
 Series.3.7.1  Series.3.7.2  Series.3.7.3  Series.3.7.4  Series.3.7.5 
       5.2775        4.6508        4.7517        7.8111        7.6375 
 Series.3.7.6  Series.3.8.1  Series.3.8.2  Series.3.8.3  Series.3.8.4 
       8.1827        5.0843        4.7216        4.3684        6.9000 
 Series.3.8.5  Series.3.8.6  Series.3.9.1  Series.3.9.2  Series.3.9.3 
       7.0314        7.5694        4.0392        4.2468        3.9571 
 Series.3.9.4  Series.3.9.5  Series.3.9.6 Series.3.10.1 Series.3.10.2 
       7.6208        8.4689        9.0228        4.0383        4.0884 
Series.3.10.3 Series.3.10.4 Series.3.10.5 Series.3.10.6 Series.3.11.1 
       4.1733        3.5459        4.2132        3.7448        3.6395 
Series.3.11.2 Series.3.11.3 Series.3.11.4 Series.3.11.5 Series.3.11.6 
       3.8334        3.7254        2.9809        2.8519        3.2691 
Series.3.12.1 Series.3.12.2 Series.3.12.3 Series.3.12.4 Series.3.12.5 
       2.7177        2.9806        2.7030        2.5105        2.8469 
Series.3.12.6  Series.4.1.1  Series.4.1.2  Series.4.1.3  Series.4.1.4 
       2.7346        1.3324        1.5012        1.3320        1.7609 
 Series.4.1.5  Series.4.1.6  Series.4.2.1  Series.4.2.2  Series.4.2.3 
       0.9723        1.4843        3.4579        3.3962        3.3801 
 Series.4.2.4  Series.4.2.5  Series.4.2.6  Series.4.3.1  Series.4.3.2 
       3.1690        3.1007        2.6054        4.1886        3.8864 
 Series.4.3.3  Series.4.3.4  Series.4.3.5  Series.4.3.6  Series.4.4.1 
       3.1904        3.4127        3.2599        2.7650        7.2229 
 Series.4.4.2  Series.4.4.3  Series.4.4.4  Series.4.4.5  Series.4.4.6 
       6.7795        6.1075        6.8747        6.4518        5.7240 
 Series.4.5.1  Series.4.5.2  Series.4.5.3  Series.4.5.4  Series.4.5.5 
       5.1526        5.0230        4.7089        5.5965        5.1155 
 Series.4.5.6  Series.4.6.1  Series.4.6.2  Series.4.6.3  Series.4.6.4 
       4.8510        4.4937        4.6357        4.5758        4.9750 
 Series.4.6.5  Series.4.6.6  Series.4.7.1  Series.4.7.2  Series.4.7.3 
       4.7688        4.6433        7.3814        7.5395        7.1163 
 Series.4.7.4  Series.4.7.5  Series.4.7.6  Series.4.8.1  Series.4.8.2 
       5.3279        5.0409        4.4522        7.0404        7.2365 
 Series.4.8.3  Series.4.8.4  Series.4.8.5  Series.4.8.6  Series.4.9.1 
       6.9942        5.7698        5.5294        5.1406        7.3507 
 Series.4.9.2  Series.4.9.3  Series.4.9.4  Series.4.9.5  Series.4.9.6 
       7.4498        7.1456        5.5059        4.9892        4.4154 
Series.4.10.1 Series.4.10.2 Series.4.10.3 Series.4.10.4 Series.4.10.5 
      -1.5823       -1.1667       -1.3396       -1.8055       -1.7891 
Series.4.10.6 Series.4.11.1 Series.4.11.2 Series.4.11.3 Series.4.11.4 
      -1.7296       -1.9226       -1.9552       -1.6579       -1.7498 
Series.4.11.5 Series.4.11.6 Series.4.12.1 Series.4.12.2 Series.4.12.3 
      -2.1154       -3.0667       -4.2887       -3.7101       -4.2395 
Series.4.12.4 Series.4.12.5 Series.4.12.6 
      -2.7825       -3.5347       -3.8492 
> 
> ######################################
> ## This early design had each series repeated nine times,
> ## three times within a subgrid and again in three adjacent
> ## subgrids. Here we measure the variability of the
> ## replicates.
> d <- ACTB@data[seq(6, nrow(ACTB@data), by=6), ]
> attach(d)
> foo <- paste("Series", Main.Row, Main.Col, Sub.Row, sep=".")
> detach()
> sum(foo == seriesNames(design))
[1] 288
> 
> avgs <- tapply(temp@concentrations, list(d$Sample), mean)
> spread <- tapply(temp@concentrations, list(d$Sample), sd)
> res <- data.frame(Mean=avgs, SD=spread, CV=spread/abs(avgs))
> round(res[order(res$SD), ], digits=4)
                      Mean     SD     CV
G26                 3.9861 0.1538 0.0386
U251 10%            7.2505 0.1902 0.0262
KM12L4              4.8456 0.2662 0.0549
PASW 480 10%01      3.4531 0.3068 0.0888
L3.6 10%            4.6902 0.3184 0.0679
L3.6                3.4922 0.3522 0.1009
SNB19               4.4653 0.4409 0.0987
SNB19 10%           4.5664 0.4514 0.0988
MDA468              2.2163 0.4642 0.2094
G26 10%             5.1302 0.4673 0.0911
PASW 480 10%01 10%  5.0677 0.4861 0.0959
MDA231              2.6485 0.4997 0.1887
SW 480 10%          3.1886 0.5514 0.1729
U251                6.0558 0.5838 0.0964
U87 EGFR 10%        3.5444 0.5884 0.1660
KM12C               4.9814 0.6154 0.1235
U87 10%             7.8049 0.6710 0.0860
KM12L4 10%          5.4445 0.7859 0.1443
BT474 10%           2.5034 0.8812 0.3520
Buffer             -1.0343 1.0071 0.9738
KM12C 10%           5.4111 1.0302 0.1904
Blank              -2.4603 1.0446 0.4246
MDA468 10%          2.8517 1.1378 0.3990
U87 EGFR 0.5        3.0561 1.1730 0.3838
BT474               0.7421 1.2301 1.6576
MCF7                0.4455 1.2552 2.8177
MDA231 10%          3.9119 1.3215 0.3378
MCF7 10%            2.3930 1.5054 0.6291
K562                2.7173 1.5122 0.5565
U87                 6.0426 1.6166 0.2675
> 
> 
> proc.time()
   user  system elapsed 
264.258   0.688 265.939 
