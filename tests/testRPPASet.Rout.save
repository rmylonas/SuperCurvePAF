
R version 2.15.3 Patched (2013-03-13 r62287) -- "Security Blanket"
Copyright (C) 2013 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> ### $Id: testRPPASet.R 945 2015-01-21 00:06:51Z proebuck $
> ###
> 
> 
> options(warn=1)
> library(SuperCurve)
Loading required package: cobs
> library(robustbase)
> library(boot)

Attaching package: 'boot'

The following object(s) are masked from 'package:robustbase':

    salinity

> source("checkFuncs")
> 
> 
> ## Attempt to make comparisons easier
> sys_tempdir <- file.path("", "tmp")
> if (file.exists(sys_tempdir) &&
+     file.info(sys_tempdir)$isdir &&
+     file.access(sys_tempdir, 2) == 0) {
+     Sys.setenv(TMPDIR=sys_tempdir)
+ }
> 
> ## create project directory in per-session temporary directory
> ## Cannot successfully test without this...
> persessionprojdir <- file.path(tempdir(), "supercurve")
> if (!dir.create(persessionprojdir)) {
+     stop("cannot create per-session project directory")
+ }
> 
> extdata.dir <- system.file("extdata", package="SuperCurveSampleData")
> path <- file.path(extdata.dir, "rppaTumorData")
> designfile <- file.path(path, "slidedesign.tsv")
> designparams <- RPPADesignParams(grouping="blockSample",
+                                  center=TRUE,
+                                  designfile=designfile)
> fitparams <- RPPAFitParams(measure="Mean.Net",
+                            model="logistic",
+                            method="nlrob",
+                            ignoreNegative=FALSE,
+                            warnLevel=-1)
> normparams <- RPPANormalizationParams(method="vs")
> 
> rppaset <- RPPASet(path,
+                    designparams,
+                    fitparams,
+                    normparams=normparams,
+                    antibodyfile="proteinAssay.tsv")
reading ERK2.txt
dev.new(): using pdf(file="Rplots2.pdf")
reading GSK3.txt
reading JNK.txt
fitting ERK2 - please wait.
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
fitting GSK3 - please wait.
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
fitting JNK - please wait.
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
> 
> ###########################
> ## tests of path
> 
> checkException(RPPASet(path=5),
+                msg="invalid value should fail")
Error in RPPASet(path = 5) : argument 'path' must be character
[1] TRUE
> 
> checkException(RPPASet(path=c("results1", "results2")),
+                msg="character vector should fail")
Error in RPPASet(path = c("results1", "results2")) : 
  argument 'path' must be of length 1
[1] TRUE
> 
> nosuchdir <- file.path(persessionprojdir, "nosuch")
> checkException(RPPASet(path=nosuchdir),
+                msg="nonexistent directory should fail")
Error in RPPASet(path = nosuchdir) : 
  directory "/tmp/RtmpXvDrjD/supercurve/nosuch" does not exist
[1] TRUE
> 
> filenotdir <- file.path(persessionprojdir, "somefile")
> file.create(filenotdir)
[1] TRUE
> checkException(RPPASet(path=filenotdir),
+                msg="not a directory should fail")
Error in RPPASet(path = filenotdir) : 
  directory "/tmp/RtmpXvDrjD/supercurve/somefile" does not exist
[1] TRUE
> 
> emptydir <- file.path(persessionprojdir, "emptydir")
> dir.create(emptydir)
> checkException(RPPASet(path=emptydir,
+                        designparams,
+                        fitparams,
+                        normparams=normparams),
+                msg="directory without quantification files should fail")
Error in RPPASet(path = emptydir, designparams, fitparams, normparams = normparams) : 
  no quantification files found in directory "/tmp/RtmpXvDrjD/supercurve/emptydir"
[1] TRUE
> 
> ###########################
> ## tests of designparams, fitparams, and normparams
> 
> checkException(RPPASet(path,
+                        designparams=fitparams),
+                msg="invalid object should fail")
Error in RPPASet(path, designparams = fitparams) : 
  argument 'designparams' must be object of class RPPADesignParams
[1] TRUE
> checkException(RPPASet(path,
+                        designparams,
+                        fitparams=RPPAFitParams(measure="bogus"),
+                        normparams=normparams),
+                msg="fitparams with invalid measure should fail")
reading ERK2.txt
dev.new(): using pdf(file="Rplots3.pdf")
Error in .local(x, y, ...) : invalid measure 'bogus'
[1] TRUE
> checkException(RPPASet(path,
+                        designparams,
+                        fitparams,
+                        normparams=RPPANormalizationParams(method="bogus")),
+                msg="normparams with unregistered method should fail")
Error in match.arg(method) : 
  'arg' should be one of "house", "median", "medpolish", "vs"
[1] TRUE
> 
> 
> ###########################
> ## tests of antibodyfile
> 
> checkException(RPPASet(path=path,
+                        designparams,
+                        fitparams,
+                        normparams=normparams,
+                        antibodyfile=5),
+                msg="invalid value should fail")
Error in RPPASet(path = path, designparams, fitparams, normparams = normparams,  : 
  argument 'antibodyfile' must be character
[1] TRUE
> 
> checkException(RPPASet(path=path,
+                        designparams,
+                        fitparams,
+                        normparams=normparams,
+                        antibodyfile=c("results1", "results2")),
+                msg="character vector should fail")
Error in RPPASet(path = path, designparams, fitparams, normparams = normparams,  : 
  argument 'antibodyfile' must be of length 1
[1] TRUE
> 
> checkException(RPPASet(path=path,
+                        designparams,
+                        fitparams,
+                        normparams=normparams,
+                        antibodyfile=""),
+                msg="empty string should fail")
Error in RPPASet(path = path, designparams, fitparams, normparams = normparams,  : 
  argument 'antibodyfile' must not be empty string
[1] TRUE
> 
> nosuchfile <- "nosuch.tsv"
> checkException(RPPASet(path=path,
+                        designparams,
+                        fitparams,
+                        normparams=normparams,
+                        antibodyfile=nosuchfile),
+                msg="nonexistent file should fail")
Error in value[[3L]](cond) : 
  cannot load antibody data from file "/Library/Frameworks/R.framework/Versions/2.15/Resources/library/SuperCurveSampleData/extdata/rppaTumorData/nosuch.tsv" - file.exists(antibodyfile) is not TRUE
[1] TRUE
> 
> checkException(RPPASet(path=path,
+                        designparams,
+                        fitparams,
+                        normparams=normparams,
+                        antibodyfile=path),
+                msg="directory instead of file should fail")
Error in value[[3L]](cond) : 
  cannot load antibody data from file "/Library/Frameworks/R.framework/Versions/2.15/Resources/library/SuperCurveSampleData/extdata/rppaTumorData" - argument is not a file
[1] TRUE
> 
> local({
+     emptyfile <- file.path(persessionprojdir, "emptyfile.tsv")
+     close(fconn <- file(emptyfile, "w"))
+ 
+     checkException(RPPASet(path=path,
+                            designparams,
+                            fitparams,
+                            normparams=normparams,
+                            antibodyfile=emptyfile),
+                    msg="empty file should fail")
+ })
Error in value[[3L]](cond) : 
  cannot load antibody data from file "/tmp/RtmpXvDrjD/supercurve/emptyfile.tsv" - no lines available in input
[1] TRUE
> 
> local({
+     singlecolfile <- file.path(persessionprojdir, "singlecolfile.tsv")
+     fconn <- file(singlecolfile, "w")
+     cat("Filename", file=fconn, sep="\n")
+     for (filename in list.files(path)) {
+         cat(filename, file=fconn, sep="\n")
+     }
+     close(fconn)
+ 
+     checkException(RPPASet(path=path,
+                            designparams,
+                            fitparams,
+                            normparams=normparams,
+                            antibodyfile=singlecolfile),
+                    msg="file with single column should fail")
+ })
Error in value[[3L]](cond) : 
  cannot load antibody data from file "/tmp/RtmpXvDrjD/supercurve/singlecolfile.tsv" - missing required column: "Antibody"
[1] TRUE
> 
> local({
+     missingreqdcolsfile <- file.path(persessionprojdir, "missingreqdcols.tsv")
+     fconn <- file(missingreqdcolsfile, "w")
+     cat(paste("Filename", "Size", sep="\t"), file=fconn, sep="\n")
+     for (filename in list.files(path)) {
+         filesize <- file.info(file.path(path, filename))$size
+         cat(paste(filename, filesize, sep="\t"),
+             file=fconn, sep="\n")
+     }
+     close(fconn)
+ 
+     checkException(RPPASet(path=path,
+                            designparams,
+                            fitparams,
+                            normparams=normparams,
+                            antibodyfile=missingreqdcolsfile),
+                    msg="file without required columns should fail")
+ })
Error in value[[3L]](cond) : 
  cannot load antibody data from file "/tmp/RtmpXvDrjD/supercurve/missingreqdcols.tsv" - missing required column: "Antibody"
[1] TRUE
> 
> 
> ###########################
> ## tests of summary rppaset
> 
> outdir <- file.path(persessionprojdir, "results")
> dir.create(outdir)
> checkException(write.summary(designparams,
+                              path=outdir),
+                msg="invalid object should fail")
Error in function (classes, fdef, mtable)  : 
  unable to find an inherited method for function 'write.summary' for signature '"RPPADesignParams"'
[1] TRUE
> 
> ###########################
> ## tests of summary path
> 
> checkException(write.summary(rppaset,
+                              path=nosuchdir),
+                msg="nonexistent output directory should fail")
Error in .local(object, ...) : 
  directory "/tmp/RtmpXvDrjD/supercurve/nosuch" does not exist
[1] TRUE
> 
> switch(.Platform$OS.type,
+        unix={
+            readonlydir <- file.path(persessionprojdir, "readonly")
+            dir.create(readonlydir, mode="0555")
+            checkException(write.summary(rppaset,
+                                         path=readonlydir),
+                           msg="readonly output directory should fail")
+        },
+        windows={
+            cat("skipped readonly output directory test (not implemented)", "\n")
+        })
Error in .local(object, ...) : 
  directory "/tmp/RtmpXvDrjD/supercurve/readonly" is not writable
[1] TRUE
> 
> ###########################
> ## tests of summary prefix
> 
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              prefix=5),
+                msg="invalid value should fail")
Error in .local(object, ...) : argument 'prefix' must be character
[1] TRUE
> 
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              prefix=c("a", "b")),
+                msg="character vector should fail")
Error in .local(object, ...) : argument 'prefix' must be of length 1
[1] TRUE
> 
> ###########################
> ## tests of summary graphs
> 
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              graphs="yellow"),
+                msg="invalid value should fail")
Error in .local(object, ...) : argument 'graphs' must be logical
[1] TRUE
> 
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              graphs=c(FALSE, TRUE)),
+                msg="logical vector should fail")
Error in .local(object, ...) : argument 'graphs' must be of length 1
[1] TRUE
> 
> 
> ###########################
> ## tests of summary tiffdir
> 
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              graphs=1,
+                              tiffdir=pi),
+                msg="invalid value should fail")
Error in .local(object, ...) : argument 'tiffdir' must be character
[1] TRUE
> 
> # :NOTE: numeric "graphs" value silently converted to logical
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              graphs=1,
+                              tiffdir=c("results1", "results2")),
+                msg="character vector should fail")
Error in .local(object, ...) : argument 'tiffdir' must be of length 1
[1] TRUE
> 
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              graphs=TRUE,
+                              tiffdir=nosuchdir),
+                msg="nonexistent directory should fail")
Error in .local(object, ...) : 
  directory "/tmp/RtmpXvDrjD/supercurve/nosuch" does not exist
[1] TRUE
> 
> checkException(write.summary(rppaset,
+                              path=outdir,
+                              graphs=TRUE,
+                              tiffdir=filenotdir),
+                msg="not a directory should fail")
Error in .local(object, ...) : 
  directory "/tmp/RtmpXvDrjD/supercurve/somefile" does not exist
[1] TRUE
> 
> ## :NOTE: If unspecified, "tiffdir" is assumed to be sibling of "path".
> ## As of version 1.3.4, the code substitutes the package's image directory
> ## if no sibling dir exists.
> 
> ## :NOTE: If "tiffdir" contains no image files, error messages from the
> ## ImageMagick binary appear onscreen, but they are not considered errors
> ## as far as the R code goes - the return code isn't currently examined
> ## for external failures. As many TIFF images contain "unrecognized tags",
> ## this is handy for letting the code continue processing. When a file is
> ## missing, a "missing slide" image is automatically substituted.
> 
> 
> ###########################
> ## tests of summary (missing ImageMagick binary)
> 
> switch(.Platform$OS.type,
+        unix={
+            # Willing to try test if 'convert' executable is not in /usr/bin
+            binary <- "convert"
+            binarydir <- dirname(Sys.which(binary))
+            usrbindir <- file.path("", "usr", "bin")
+            if (!grepl(binarydir, sprintf("^%s", usrbindir), fixed=TRUE)) {
+ 
+                ##--------------------------------------------------------------
+                simulateMissingConvertBinary <- function() {
+                    savePATH <- Sys.getenv("PATH")
+                    on.exit(Sys.setenv("PATH"=savePATH))
+                    Sys.setenv("PATH"=usrbindir)
+ 
+                    tryCatch(write.summary(rppaset,
+                                           path=outdir,
+                                           graphs=TRUE,
+                                           tiffdir=emptydir),
+                             warning=function(w) {
+                                 errmsg <- paste("(converted from warning)",
+                                                 w$message)
+                                 signalCondition(simpleError(errmsg))
+                             })
+                }
+ 
+                checkException(simulateMissingConvertBinary(),
+                               msg="missing ImageMagick binary should fail")
+            } else {
+                cat("skipped ImageMagick test",
+                    "-",
+                    sQuote(binary),
+                    "binary in",
+                    dQuote(usrbindir),
+                    "\n")
+            }
+        },
+        windows={
+            cat("skipped ImageMagick test (not implemented)", "\n")
+        })
dev.new(): using pdf(file="Rplots4.pdf")
merging graphs and image for ERK2
sh: convert: command not found
Error : (converted from warning) ImageMagick executable 'convert' not installed or unavailable via PATH
[1] TRUE
> 
> 
> ## test one that should work...
> write.summary(rppaset,
+               path=outdir,
+               prefix="testing",
+               graphs=FALSE)
> 
> 
> 
> ## If you need to save the results for some reason...
> if (FALSE) {
+     savedir <- file.path(path.expand("~"), "supercurve", "results")
+     if (!file.exists(savedir)) {
+         if (!dir.create(savedir, recursive=TRUE)) {
+             stop(sprintf("directory %s could not be created",
+                          dQuote(savedir)))
+         }
+     }
+     file.copy(list.files(path=outdir, full.names=TRUE),
+               savedir,
+               overwrite=TRUE)
+ }
> 
> 
> proc.time()
   user  system elapsed 
 12.894   0.105  13.174 
