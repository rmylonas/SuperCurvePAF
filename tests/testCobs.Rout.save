
R version 2.15.3 Patched (2013-03-13 r62287) -- "Security Blanket"
Copyright (C) 2013 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> ### $Id: testCobs.R 945 2015-01-21 00:06:51Z proebuck $
> ###
> 
> 
> if (!nzchar(Sys.getenv("SUPERCURVE_FULL_TEST"))) {
+     cat(">>>>                <<<<", "\n")
+     cat(">>>>  Test skipped  <<<<", "\n")
+     cat(">>>>                <<<<", "\n")
+     message(sprintf("To run all package tests, define %s environment variable",
+                     dQuote("SUPERCURVE_FULL_TEST")))
+     q("no")
+ }
> options(warn=1)
> library(SuperCurve)
Loading required package: cobs
> library(robustbase)
> 
> extdata.dir <- system.file("extdata", package="SuperCurveSampleData")
> 
> ######################################
> ## load the tumor data
> home <- file.path(extdata.dir, "rppaTumorData")
> 
> ## first locate the list of assays
> ## the name 'proteins' is required
> ## must include two columns named 'Antibody' and 'Filename'.
> proteins <- read.delim(file.path(home, "proteinAssay.tsv"), as.is=TRUE)
> rownames(proteins) <- as.character(proteins$Antibody)
> 
> for (i in seq_len(nrow(proteins))) {
+     temp <- RPPA(proteins$Filename[i],
+                  path=home,
+                  antibody=proteins$Antibody[i])
+     assign(proteins$Antibody[i], temp, 1)
+ }
> remove(i, temp)
> 
> ######################################
> ## work out the appropriate design layout
> design <- RPPADesign(ERK2,
+                      grouping="blockSample",
+                      center=TRUE,
+                      controls=list("neg con", "pos con"))
> 
> ######################################
> ## must define the 'model' to use
> model <- "cobs"
> 
> ######################################
> ## must define the 'measure' to use
> measure <- "Mean.Net"
> 
> ######################################
> ## must define the 'method' to use
> method <- 'nlrq'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ver <- packageDescription("SuperCurve", fields = "Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.5.8 

> cat(paste("model = ", model, "; method = ", method, 
+     "; measure = ", measure, sep = ""), "\n")
model = cobs; method = nlrq; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item, design, measure, method = method, 
+         model = model, ignoreNegative = FALSE, warnLevel = -1), 
+         TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm = TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm = TRUE, trim = 0.1)
+     par(bg = "white")
+     plot(temp, xlim = c(-15, 15), main = paste(itemName, measure, 
+         ver), sub = paste("Mean square residuals =", round(meansq)))
+     if (FALSE) {
+         dev.copy(png, file.path(paste(itemName, measure, ver, 
+             "png", sep = ".")), width = 640, height = 640)
+         dev.off()
+     }
+     print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
Loading required package: quantreg
Loading required package: SparseM

Attaching package: 'SparseM'

The following object(s) are masked from 'package:base':

    backsolve

[1] "ERK2 Mean.Net 295246 121653"
[1] "GSK3 Mean.Net 297740 123763"
[1] "JNK Mean.Net 333207 101898"

> remove(i, itemName, item, meansq, tmeansq)
> 
> method <- 'nlrob'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ver <- packageDescription("SuperCurve", fields = "Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.5.8 

> cat(paste("model = ", model, "; method = ", method, 
+     "; measure = ", measure, sep = ""), "\n")
model = cobs; method = nlrob; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item, design, measure, method = method, 
+         model = model, ignoreNegative = FALSE, warnLevel = -1), 
+         TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm = TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm = TRUE, trim = 0.1)
+     par(bg = "white")
+     plot(temp, xlim = c(-15, 15), main = paste(itemName, measure, 
+         ver), sub = paste("Mean square residuals =", round(meansq)))
+     if (FALSE) {
+         dev.copy(png, file.path(paste(itemName, measure, ver, 
+             "png", sep = ".")), width = 640, height = 640)
+         dev.off()
+     }
+     print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
[1] "ERK2 Mean.Net 263983 124538"
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
[1] "GSK3 Mean.Net 291770 124061"
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
[1] "JNK Mean.Net 284123 104377"

> remove(i, itemName, item, meansq, tmeansq)
> 
> method <- "nls"
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ver <- packageDescription("SuperCurve", fields = "Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.5.8 

> cat(paste("model = ", model, "; method = ", method, 
+     "; measure = ", measure, sep = ""), "\n")
model = cobs; method = nls; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item, design, measure, method = method, 
+         model = model, ignoreNegative = FALSE, warnLevel = -1), 
+         TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm = TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm = TRUE, trim = 0.1)
+     par(bg = "white")
+     plot(temp, xlim = c(-15, 15), main = paste(itemName, measure, 
+         ver), sub = paste("Mean square residuals =", round(meansq)))
+     if (FALSE) {
+         dev.copy(png, file.path(paste(itemName, measure, ver, 
+             "png", sep = ".")), width = 640, height = 640)
+         dev.off()
+     }
+     print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
[1] "ERK2 Mean.Net 257063 130929"
[1] "GSK3 Mean.Net 258045 136270"
[1] "JNK Mean.Net 273147 114311"

> remove(i, itemName, item, meansq, tmeansq)
> 
> ######################################
> ## print the concentrations from the last fit. These will
> ## automatically be compared with the saved output when we
> ## run 'R CMD check'
> round(temp@concentrations, digits=4)
  sample 1.1.1   sample 2.1.1   sample 3.1.2   sample 4.1.2   sample 5.1.3 
       -4.0811        -7.6974        -3.3025        -3.9834        -3.9924 
  sample 6.1.3   sample 7.1.4   sample 8.1.4   sample 9.1.5  sample 10.1.5 
       -7.4559        -4.0671        -7.2802        -4.9620        -8.9690 
 sample 11.1.6  sample 12.1.6  sample 13.1.7  sample 14.1.7  sample 15.1.8 
       -5.0436        -9.2994        -5.4855        -7.0199        -7.9932 
 sample 16.1.8  sample 17.1.9  sample 18.1.9 sample 19.1.10 sample 20.1.10 
       -4.3036        -3.6753        -4.4229        -2.1163        -7.8233 
sample 21.1.11 sample 22.1.11 sample 23.1.12 sample 24.1.12  sample 25.2.1 
       -4.4619        -5.8950        -1.2669        -6.2549        -2.9121 
 sample 26.2.1  sample 27.2.2  sample 28.2.2  sample 29.2.3  sample 30.2.3 
       -8.6760        -3.1489        -6.5158        -2.3676        -9.2994 
 sample 31.2.4  sample 32.2.4  sample 33.2.5  sample 34.2.5  sample 35.2.6 
       -4.0385        -6.0364        -3.2396        -5.1490        -3.3325 
 sample 36.2.6  sample 37.2.7  sample 38.2.7  sample 39.2.8  sample 40.2.8 
       -3.8885        -3.1190        -3.6320        -0.6942        -7.3687 
 sample 41.2.9  sample 42.2.9 sample 43.2.10 sample 44.2.10 sample 45.2.11 
       -3.1086        -3.4728        -1.0455        -4.5497        -2.6940 
sample 46.2.11 sample 47.2.12 sample 48.2.12  sample 49.3.1  sample 50.3.1 
       -8.0472        -0.7377        -1.9651        -3.0461        -3.9900 
 sample 51.3.2  sample 52.3.2  sample 53.3.3  sample 54.3.3  sample 55.3.4 
       -3.0364        -5.8671        -2.6317        -3.5379        -3.2286 
 sample 56.3.4  sample 57.3.5  sample 58.3.5  sample 59.3.6  sample 60.3.6 
       -5.8460        -2.4706        -3.9862        -3.2859        -4.3974 
 sample 61.3.7  sample 62.3.7  sample 63.3.8  sample 64.3.8  sample 65.3.9 
       -2.5938        -3.6830        -3.4970        -6.6738        -2.8363 
 sample 66.3.9 sample 67.3.10 sample 68.3.10 sample 69.3.11 sample 70.3.11 
       -6.3722        -6.5586        -6.7842        -2.7708        -4.3201 
sample 71.3.12 sample 72.3.12  sample 73.4.1  sample 74.4.1  sample 75.4.2 
       -4.5702        -7.5675        -3.8352        -6.5253        -8.0721 
 sample 76.4.2  sample 77.4.3  sample 78.4.3  sample 79.4.4  sample 80.4.4 
       -7.9626        -4.8128        -4.7216        -0.9142        -3.2661 
 sample 81.4.5  sample 82.4.5  sample 83.4.6  sample 84.4.6  sample 85.4.7 
       -4.3757        -7.6829        -3.2964        -4.6277        -6.3757 
 sample 86.4.7  sample 87.4.8  sample 88.4.8  sample 89.4.9  sample 90.4.9 
       -6.0699        -5.4793        -8.3355        -4.7962        -4.4836 
sample 91.4.10 sample 92.4.10 sample 93.4.11 sample 94.4.11 sample 95.4.12 
       -3.1734        -6.7587        -3.8599        -5.4981        -7.4548 
sample 96.4.12 
       -9.2994 
> 
> 
> proc.time()
   user  system elapsed 
109.028   0.357 109.477 
