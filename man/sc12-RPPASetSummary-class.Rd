% $Id: sc12-RPPASetSummary-class.Rd 904 2014-07-14 00:54:44Z proebuck $

\name{RPPASetSummary-class}
\alias{RPPASetSummary-class}
\alias{RPPASetSummary}
\alias{is.RPPASetSummary}
\alias{write.summary,RPPASetSummary-method}
\docType{class}
\title{Class "RPPASetSummary"}
\description{
  The RPPASetSummary class contains the summary information derived from
  an RPPASet object.
}
\usage{
RPPASetSummary(rppaset,
               onlynormqcgood=ran.prefitqc(rppaset),
               monitor=NULL)
is.RPPASetSummary(x)
\S4method{write.summary}{RPPASetSummary}(object,
              path,
              prefix="supercurve",
              monitor=NULL,
              \dots)
}
\arguments{
  \item{rppaset}{object of class \code{RPPASet}}
  \item{onlynormqcgood}{logical scalar. If \code{TRUE}, filters the slides
    to be normalized according to their pre-fit quality control scores.}
  \item{monitor}{object of class \code{SCProgressMonitor}}
  \item{x}{object of class \code{RPPASetSummary}}
  \item{object}{object of class \code{RPPASetSummary}}
  \item{path}{character string specifying the path from the current
    directory to the directory containing the files to be processed}
  \item{prefix}{character string used as a prefix on files generated by
    the \code{write.summary} method}
  \item{\dots}{extra arguments for generic routines}
}
\section{Objects from the Class}{
  Although objects of the class can (in theory) be created by a direct call
  to \link[methods]{new}, the only realistic method is to use the
  \code{RPPASetSummary} generator function.
}
\section{Slots}{
  \describe{
    \item{\code{raw}:}{numeric matrix of raw concentrations}
    \item{\code{ss}:}{numeric matrix of \eqn{R^2} statistical values}
    \item{\code{norm}:}{numeric matrix of normalized concentrations}
    \item{\code{probs}:}{numeric vector of goodness of fit probabilities}
    \item{\code{completed}:}{logical matrix specifying stage completion
      for each slide}
    \item{\code{design}:}{object of class \code{RPPADesign}, common to all
      the slides}
    \item{\code{onlynormqcgood}:}{logical scalar specifying if raw
      concentrations were filtered according to their pre-fit quality control
      scores prior to normalization}
    \item{\code{version}:}{character string containing the version of this
      package used to construct the object}
  }
}
\section{Methods}{
  \describe{
    \item{write.summary}{
      \code{signature(object = "RPPASetSummary")}:\cr
      Generates three \acronym{CSV} files: one for the raw concentrations, one
      for the \eqn{R^2} statistics, and one for the normalized concentrations;
      a fourth file containing the goodness of fit probabilities may be present
      if prefit QC analysis was requested. Additionally, a \acronym{TSV} file
      detailing completion of each stage of processing for each slide is
      produced.}
  }
}
\value{
  The \code{RPPASetSummary} generator returns an object of class
  \code{RPPASetSummary}.

  The \code{is.RPPASetSummary} method returns \code{TRUE} if its
  argument is an object of class \code{RPPASetSummary}.

  The \code{write.summary} method invisibly returns \code{NULL}.
}
\note{
  The three \acronym{CSV} files may be reordered (to match that of the original
  input) when written to disk.
}
\author{
  P. Roebuck \email{proebuck@mdanderson.org}
}
\seealso{
  \code{\link{RPPASet}}
}
\examples{
  \dontrun{
parentdir <- file.path("C:", "MyData")
txtdir <- file.path(parentdir, "txt")     # quantification files
outdir <- file.path(parentdir, "results") # output files

designparams <- RPPADesignParams(grouping="blockSample",
                                 center=FALSE,
                                 aliasfile="layoutInfo.tsv",
                                 designfile="slidedesign.tsv")
fitparams <- RPPAFitParams(measure="Mean.Net",
                           method="nlrob",
                           model="cobs",
                           ignoreNegative=FALSE,
                           warnLevel=-1,
                           verbose=FALSE)
normparams <- RPPANormalizationParams(method="vs")
rppaset <- RPPASet(txtdir,
                   designparams,
                   fitparams,
                   normparams=normparams)
## If you REALLY want to do this manually. It will be invoked
## automatically if you invoke write.summary(rppaset) instead...
write.summary(summary(rppaset),
              path=outdir,
              graphs=FALSE)
  }
}
\keyword{classes}
\keyword{models}
\keyword{nonlinear}
\keyword{nonparametric}
\keyword{regression}
\keyword{robust}

